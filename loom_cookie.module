<?php
/** @noinspection PhpUnused */
/** @noinspection HtmlUnknownTarget */

require_once 'src/Category.php';

/**
 * Implements hook_menu().
 */
function loom_cookie_menu() {
  $access = ['administer EU Cookie Compliance popup'];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie'] = [
    'title' => 'Loom Cookie',
    'type' => MENU_LOCAL_ACTION,
    'description' => 'Extension for eu_cookie_compliance module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_admin_form'],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.admin.inc',
  ];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie/categories'] = [
    'title' => 'Loom Cookie: Categories',
    'type' => MENU_LOCAL_ACTION,
    'description' => 'Extension for eu_cookie_compliance module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_categories_form'],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.categories.inc',
  ];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie/categories/add'] = [
    'title' => 'Loom Cookie: Add category',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_category_form'],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.category.inc',
    'type' => MENU_LOCAL_ACTION,
  ];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie/categories/export'] = [
    'title' => 'Loom Cookie: Export categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_categories_export_form'],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.categories.export.inc',
    'type' => MENU_LOCAL_ACTION,
  ];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie/categories/%/edit'] = [
    'title' => 'Loom Cookie: Categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_category_form', 6],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.category.inc',
  ];

  $items['admin/config/system/eu-cookie-compliance/loom-cookie/categories/%/delete'] = [
    'title' => 'Loom Cookie: Delete category',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['loom_cookie_category_delete_confirm', 6],
    'access arguments' => $access,
    'file' => 'includes/loom_cookie.category.delete.inc',
  ];

  return $items;
}

function loom_cookie_get_settings($setting = 'all') {
  $settings = variable_get('loom_cookie', []);

  // Ensure a default value exists for each setting.
  $settings += [
    'consent_storage' => ['lifetime' => '100'],
  ];

  if ($setting == 'all') {
    return $settings;
  }

  return isset($settings[$setting]) ? $settings[$setting] : NULL;
}

/**
 * @param bool $as_objects (default: true)
 *
 * @return Category[]|array[]
 */
function loom_cookie_get_categories($as_objects = TRUE) {
  $langcode = i18n_langcode();

  variable_realm_initialize('language', $langcode);
  global $conf;

  $keys = array_filter(array_keys($conf), function ($key) {
    return substr($key, 0, 22) == 'loom_cookie_category__';
  });

  /** @var Category[] $categories */
  $categories = array_filter(array_map(function ($key) use ($conf) {
    if (!empty($conf[$key])) {
      return $conf[$key];
    }

    return NULL;
  }, $keys));

  $categories_by_id = [];
  foreach ($categories as $category) {
    $categories_by_id[$category['id']] = $category;
  }

  uasort($categories_by_id, function ($a, $b) {
    $weight_a = !empty($a['weight']) ? $a['weight'] : 0;
    $weight_b = !empty($b['weight']) ? $b['weight'] : 0;
    return $weight_a < $weight_b ? -1 : 1;
  });

  if ($as_objects) {
    return array_map(
      function ($item) {
        $category = new Category($item);
        $category->isNew = FALSE;
        return $category;
      }, $categories_by_id
    );
  }

  return $categories_by_id;
}

function loom_cookie_get_ecc_settings() {
  return variable_get('eu_cookie_compliance');
}

function loom_cookie_set_ecc_settings($settings) {
  foreach (i18n_language_list() as $langcode => $lang) {
    $ecc_settings = variable_realm_get('language', $langcode, 'eu_cookie_compliance');
    foreach ($settings as $key => $value) {
      $ecc_settings[$key] = $value;
    }
    variable_realm_set('language', $langcode, 'eu_cookie_compliance', $ecc_settings, TRUE);
  }
}

function loom_cookie_multiline_split($value): array {
  if (empty($value)) {
    return [];
  }
  return str_replace("\r", '', array_filter(array_unique(explode("\n", $value))));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 */
function loom_cookie_form_eu_cookie_compliance_admin_form_alter(&$form) {
  $overview_url = '/admin/config/system/eu-cookie-compliance/loom-cookie/categories';

  // disable the module's own script filter feature in favor of our custom one
  $form['javascripts']['eu_cookie_compliance']['disabled_javascripts'] = [
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#disabled' => TRUE,
    '#title' => 'Old settings (readonly)',
    '#tree' => FALSE,
    0 => $form['javascripts']['eu_cookie_compliance']['disabled_javascripts'],
  ];

  $form['javascripts']['eu_cookie_compliance']['link_to_loom_cookie'] = [
    '#markup' => t('<strong>This feature has been replaced by the <a href="@link">LOOM Cookie</a> module.</strong>', [
      '@link' => $overview_url,
    ]),
    '#weight' => -10,
  ];
  // add link to our module settings in consent storage section
  $form['consent_storage']['link_to_loom_cookie'] = [
    '#markup' => t('<strong>See <a href="@link">here</a> for more options.</strong>', [
      '@link' => '/admin/config/system/eu-cookie-compliance/loom-cookie',
    ]),
  ];

  // disable the 'whitelisted cookies' field because we set its content when a category is saved
  $form['cookies']['#disabled'] = TRUE;

  $form['cookies']['link_to_loom_cookie'] = [
    '#markup' => t('<strong>This is automatically set by the <a href="@link">LOOM Cookie</a> module.</strong>', [
      '@link' => $overview_url,
    ]),
    '#weight' => -10,
  ];

  $form['consent_per_category']['eu_cookie_compliance']['cookie_categories']['#disabled'] = TRUE;
  $form['consent_per_category']['eu_cookie_compliance']['link_to_loom_cookie'] = [
    '#markup' => t('<strong>The cookie categories are automatically set by the <a href="@link">LOOM Cookie</a> module.</strong>', [
      '@link' => $overview_url,
    ]),
    '#weight' => -10,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $vars
 */
function loom_cookie_preprocess_eu_cookie_compliance_popup_info(&$vars) {
  if (empty($vars['cookie_categories'])) {
    return;
  }

  $categories = loom_cookie_get_categories();

  foreach ($vars['cookie_categories'] as $cat_id => &$cookie_category) {
    $category = $categories[$cat_id];

    $cookie_category['id'] = $cat_id;
    $cookie_category['label'] = $category->label();
    if (!empty($category->description)) {
      $cookie_category['description'] = $category->description['value'];
    }
    if (!empty($category->detailedDescription['value'])) {
      $cookie_category['detailed_description'] = $category->detailedDescription['value'];
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * @param array $page
 */
function loom_cookie_page_build(&$page) {
  // only on frontend pages
  if (path_is_admin(current_path())) {
    return;
  }

  $categories = loom_cookie_get_categories();

  $js_settings = [];

  foreach ($categories as $category) {
    $scriptUrlRegexesClientSide = loom_cookie_multiline_split($category->scriptUrlRegexesClientSide);
    if (!empty($scriptUrlRegexesClientSide)) {
      $script_url_regexes = str_replace('/', '\/', $scriptUrlRegexesClientSide);
      $big_regex = !empty($script_url_regexes)
        ? '^(' . implode('|', $script_url_regexes) . ')$'
        : '';

      if ($big_regex) {
        $js_settings[$category->id]['clientSideBlockedScripts'] = $big_regex;
      }
    }
  }

  drupal_add_js(['loom_cookie' => $js_settings], ['type' => 'setting']);

  // insert script that re-enables scripts when the category gets allowed
  drupal_add_js(drupal_get_path('module', 'loom_cookie') . '/js/loom-cookie.js', [
    'group' => JS_DEFAULT,
    'weight' => -100,
  ]);
  // add styles
  drupal_add_css(drupal_get_path('module', 'loom_cookie') . '/css/loom-cookie.css');
}

/**
 * Implements hook_exit().
 */
function loom_cookie_exit() {
  // only on frontend pages
  if (path_is_admin(current_path())) {
    return;
  }

  // get html output and remove it from the output buffer
  $content = ob_get_contents();
  ob_clean();

  $categories = loom_cookie_get_categories();

  // collect regexes by category for performance reasons
  $url_regexes_by_category = [];
  $block_regexes_by_category = [];
  $embed_url_regexes_by_category = [];
  foreach ($categories as $category) {
    $scriptUrlRegexes = loom_cookie_multiline_split($category->scriptUrlRegexes);
    $scriptBlockRegexes = loom_cookie_multiline_split($category->scriptBlockRegexes);
    $embedUrlRegexes = loom_cookie_multiline_split($category->embedUrlRegexes);

    $url_regexes_by_category[$category->id()] = !empty($scriptUrlRegexes)
      ? '%^(' . implode('|', $scriptUrlRegexes) . ')$%imsU'
      : NULL;

    $block_regexes_by_category[$category->id()] = !empty($scriptBlockRegexes)
      ? /** @lang RegExp */
      '%<script.*>(' . implode('|', $scriptBlockRegexes) . ')</script>%imsU'
      : NULL;

    $embed_url_regexes_by_category[$category->id()] = !empty($embedUrlRegexes)
      ? '%^(' . implode('|', $embedUrlRegexes) . ')$%imsU'
      : NULL;
  }

  loom_cookie_filter_scripts($categories,
    $url_regexes_by_category,
    $block_regexes_by_category, $content);

  loom_cookie_filter_embeds($categories, $embed_url_regexes_by_category,
    $content);

  // send modified output
  echo $content;
}

function loom_cookie_filter_scripts($categories, $url_regexes_by_category, $block_regexes_by_category, &$content) {
  $content = preg_replace_callback(
    '%<script[^>]*>.*</script>%imsU',
    function ($script_element) use ($categories, $url_regexes_by_category, $block_regexes_by_category) {
      $whole_tag = $script_element[0];
      $script_element = $script_element[0];

      foreach ($categories as $category) {
        $category_id = $category->id();

        preg_match('%<script(?> .*)* src=["\'](.*)["\'][^>]*>%im',
          $script_element, $matches);
        if (!empty($matches)) {
          // it is a script tag with src attribute

          $big_url_regex = $url_regexes_by_category[$category_id];
          if ($big_url_regex) {
            $src = trim($matches[1]);
            if (preg_match($big_url_regex, $src)) {
              // replace url with empty data url
              $whole_tag = str_replace($src, 'data:,', $whole_tag);

              // add url to be restored by JS
              $whole_tag = str_replace(
                '<script',
                '<script data-loom-cookie-category="' . $category_id . '"' .
                ' data-loom-cookie-src="' . $src . '"',
                $whole_tag);

              // replace this element
              return $whole_tag;
            }
          }
        }
        else {
          // it is a script block

          $big_block_regex = $block_regexes_by_category[$category_id];
          if ($big_block_regex) {
            if (preg_match($big_block_regex, $script_element)) {
              // replace script block with empty script tag and add original
              // content as attribute
              $whole_tag = preg_replace_callback(
                '%(?<begin><script.*)>(?<script_content>.+)(?<end></script>)%imsU',
                function ($matches) use ($category_id) {
                  return $matches['begin'] .
                    ' data-loom-cookie-category="' . $category_id . '"' .
                    ' data-loom-cookie-type="script-block"' .
                    ' data-loom-cookie-content="' . htmlentities($matches['script_content']) . '"' .
                    '>' .
                    $matches['end'];
                },
                $whole_tag);

              // replace this element
              return $whole_tag;
            }
          }
        }
      }

      // no replacement necessary
      return $script_element;
    }, $content);
}

/**
 * @param \Category[] $categories
 * @param $embed_url_regexes_by_category
 * @param $content
 */
function loom_cookie_filter_embeds($categories, $embed_url_regexes_by_category, &$content) {
  $content = preg_replace_callback(
    '%<iframe.+src="(?<src_iframe>.*)".*>.*</iframe>|<embed.+src="(?<src_embed>.*)"[^>]*\s?/?>%imsU',
    function ($element) use ($embed_url_regexes_by_category, $categories) {
      $whole_tag = $element[0];
      if (!empty($element['src_iframe'])) {
        // it is an iframe
        $src = trim($element['src_iframe']);
        $tag = 'iframe';
      }
      elseif (!empty($element['src_embed'])) {
        // it is an embed
        $src = trim($element['src_embed']);
        $tag = 'embed';
      }
      else {
        return $whole_tag;
      }

      foreach ($embed_url_regexes_by_category as $category_id => $big_url_regex) {
        if (empty($big_url_regex)) {
          continue;
        }

        if (preg_match($big_url_regex, $src)) {
          // replace url with empty data url
          $whole_tag = str_replace($src, 'data:,', $whole_tag);

          // add url to be restored by JS
          $whole_tag = str_replace(
            '<' . $tag,
            '<' . $tag .
            ' data-loom-cookie-category="' . $category_id . '"' .
            ' data-loom-cookie-src="' . $src . '"' .
            ' data-loom-cookie-message="' . htmlspecialchars($categories[$category_id]->embedMessage) . '"',
            $whole_tag);

          // replace this element
          return $whole_tag;
        }
      }

      // no replacement necessary
      return $whole_tag;
    }, $content);
}

/**
 * Implements hook_eu_cookie_compliance_path_match_alter().
 *
 * @param $excluded
 */
function loom_cookie_eu_cookie_compliance_path_match_alter(&$excluded) {
  // Never disable eu_cookie_compliance based on the path.
  // We just hide the banner popup by custom code.
  $excluded = FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param $vars
 */
function loom_cookie_preprocess_html(&$vars) {
  // hide cookie banner on specific pages
  $ecc_config = loom_cookie_get_ecc_settings();
  $path = current_path();
  $url_alias_path = drupal_get_path_alias($path);
  $exclude_paths = $ecc_config['exclude_paths'];
  $path_match = drupal_match_path($path, $exclude_paths);
  $path_match_url_alias = drupal_match_path($url_alias_path, $exclude_paths);
  if ($path_match || $path_match_url_alias) {
    $vars['classes_array'][] = 'hide-cookie-banner';
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param $owner
 * @param $plugin_type
 *
 * @return string|null
 */
function loom_cookie_ctools_plugin_directory($owner, $plugin_type) {
  if (($owner == 'eu_cookie_compliance' || $owner == 'euccx') && !empty($plugin_type)) {
    return "plugins/$plugin_type";
  }

  return NULL;
}

/**
 * Implements hook_cron().
 */
function loom_cookie_cron() {
  // delete old consent entries
  $consent_entry_lifetime = loom_cookie_get_settings('consent_storage')['lifetime'];
  $max_possible_timestamp = time() - $consent_entry_lifetime * 24 * 60 * 60;

  db_delete('eu_cookie_compliance_basic_consent')
    ->condition('timestamp', $max_possible_timestamp, '<')
    ->execute();
}
