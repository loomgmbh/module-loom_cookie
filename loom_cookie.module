<?php /** @noinspection HtmlUnknownTarget */

/** @noinspection PhpUnused */

/**
 * @file
 * The main file for the LOOM Cookie module.
 *
 * This module intends to deal with the EU Directive on Privacy and Electronic
 * Communications that comes into effect in the UK on 26th May 2012.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityDeleteForm;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\loom_cookie\CategoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_help().
 */
function loom_cookie_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.loom_cookie':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module intends to deal with the EU Directive on Privacy and Electronic Communications that comes into effect on 26th May 2012. From that date, if you are not compliant or visibly working towards compliance, you run the risk of enforcement action, which can include a fine of up to half a million pounds for a serious breach.') . '</p>';
      $output .= '<h3>' . t('How it works') . '</h3>';
      $output .= '<p>' . t('The module displays a banner at the bottom or the top of website to make users aware of the fact that cookies are being set. The user may then give his/her consent or move to a page that provides more details. Consent is given by user pressing the agree buttons or by continuing browsing the website. Once consent is given another banner appears with a "Thank you" message.') . '</p>';
      $output .= '<p>' . t('The module provides a settings page where the banner can be customized. There are also template files for the banners that can be overridden by your theme.') . '</p>';
      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<ol><p><li>' . t('Unzip the files to the "sites/all/modules" OR "modules" directory and enable the module.') . '</li></p>';
      $output .= '<p><li>' . t('If desired, give the administer LOOM Cookie banner permissions that allow users of certain roles access the administration page. You can do so on the admin/user/permissions page.') . '</li></p>';
      // @codingStandardsIgnoreLine
      $output .= "<p><label>-&nbsp;</label>" . t("there is also a 'display loom cookie banner' permission that helps you show the banner to the roles you desire.") . "</p>";
      $output .= '<p><li>' . t('You may want to create a page that would explain how your site uses cookies. Alternatively, if you have a privacy policy, you can link the banner to that page (see next step).') . '</li></p>';
      $output .= '<p><li>' . t('Go to the admin/config/system/loom-cookie page to configure and enable the banner.') . '</li></p>';
      $output .= '<p><li>' . t('If you want to customize the banner background and text color, either type in the hex values or simply install http://drupal.org/project/jquery_colorpicker.') . '</li></p>';
      $output .= '<p><li>' . t('If you want to theme your banner override the themes in the template file.') . '</li></p>';
      $output .= '<p><li>' . t('If you want to show the message in EU countries only, install the Smart IP module: http://drupal.org/project/smart_ip and enable the option on the admin page.') . '</li></p></ol>';
      $output .= '<p><b>' . t('NOTICE: The module does not audit your cookies nor does it prevent cookies from being set.') . '</b></p>';
      $output .= '<h3>' . t('For developers') . '</h3>';
      $output .= '<p>' . t('If you want to conditionally set cookies in your module, there is a javascript function provided that returns TRUE if the current user has given his consent:') . '</p>';
      $output .= '<p><code>Drupal.loom_cookie.hasAgreed()</code></p>';

      return ['#markup' => $output];
  }
}

/**
 * Implements hook_theme().
 */
function loom_cookie_theme($existing, $type, $theme, $path) {
  return [
    'eu_cookie_compliance_popup_info' => [
      'template' => 'eu_cookie_compliance_popup_info',
      'variables' => [
        'message' => NULL,
        'agree_button' => NULL,
        'disagree_button' => NULL,
        'more_info_button' => NULL,
        'secondary_button_label' => NULL,
        'primary_button_class' => NULL,
        'secondary_button_class' => NULL,
        'cookie_categories' => NULL,
        'save_preferences_button_label' => NULL,
        'fix_first_cookie_category' => NULL,
        'privacy_settings_tab_label' => NULL,
        'withdraw_button_on_info_popup' => FALSE,
        'method' => 'default',
      ],
    ],
    'eu_cookie_compliance_withdraw' => [
      'template' => 'eu_cookie_compliance_withdraw',
      'variables' => [
        'withdraw_tab_button_label' => NULL,
        'message' => NULL,
        'withdraw_action_button_label' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function loom_cookie_page_attachments(&$attachments) {
  $config = Drupal::config('loom_cookie.settings');

  // Check Add/Remove domains.
  $domain_allow = TRUE;
  $domain_option = $config->get('domains_option');

  if (!empty($config->get('domains_list'))) {
    global $base_url;

    $domains_list = str_replace(["\r\n", "\r"], "\n", $config->get('domains_list'));
    $domains_list = explode("\n", $domains_list);
    $domains_list = preg_replace('{/$}', '', $domains_list);
    $domain_match = in_array($base_url, $domains_list);

    if ($domain_option && $domain_match) {
      $domain_allow = FALSE;
    }

    if (!$domain_option && !$domain_match) {
      $domain_allow = FALSE;
    }
  }

  // Check hide cookie compliance on admin theme.
  $admin_theme_match = FALSE;

  if ($config->get('exclude_admin_theme')) {
    // Determines whether the active route is an admin one.
    $is_route_admin = Drupal::service('router.admin_context')->isAdminRoute();
    if ($is_route_admin) {
      $admin_theme_match = TRUE;
    }
  }

  $geoip_match = ['in_eu' => TRUE];
  if (!empty($config->get('eu_only')) && $config->get('eu_only')) {
    $geoip_match = _loom_cookie_user_in_eu();
  }

  // Allow other modules to alter the geo IP matching logic.
  Drupal::moduleHandler()->alter('loom_cookie_geoip_match', $geoip_match);

  $uid1_match = TRUE;
  if (Drupal::currentUser()->id() == 1 && !empty($config->get('exclude_uid_1')) && $config->get('exclude_uid_1')) {
    $uid1_match = FALSE;
  }

  // Allow other modules to alter if the banner needs to be shown or not.
  $modules_allow_popup = TRUE;
  Drupal::moduleHandler()->alter('loom_cookie_show_popup', $modules_allow_popup);

  if ($config->get('popup_enabled') && Drupal::currentUser()->hasPermission('display loom cookie popup') && $geoip_match['in_eu'] && $domain_allow && !$admin_theme_match && $uid1_match && $modules_allow_popup) {
    $language = Drupal::languageManager()->getCurrentLanguage();

    $data['css'] = '';
    // Color overrides.
    if ($config->get('popup_bg_hex') !== '' && $config->get('popup_text_hex') !== '') {
      $data['css'] = 'div#sliding-popup, div#sliding-popup .eu-cookie-withdraw-banner, .eu-cookie-withdraw-tab {background: #' . Html::escape($config->get('popup_bg_hex')) . '} div#sliding-popup.eu-cookie-withdraw-wrapper { background: transparent; } #sliding-popup h1, #sliding-popup h2, #sliding-popup h3, #sliding-popup p, #sliding-popup label, #sliding-popup div, .eu-cookie-compliance-more-button, .eu-cookie-compliance-secondary-button, .eu-cookie-withdraw-tab { color: #' . Html::escape($config->get('popup_text_hex')) . ';} .eu-cookie-withdraw-tab { border-color: #' . Html::escape($config->get('popup_text_hex')) . ';}';
    }
    if (!empty($config->get('popup_position')) && $config->get('popup_position') && !empty($config->get('fixed_top_position')) && $config->get('fixed_top_position')) {
      $data['css'] .= '#sliding-popup.sliding-popup-top { position: fixed; }';
    }

    $method = $config->get('method') ? $config->get('method') : 'default';

    if ($method == 'auto') {
      $dnt = isset($_SERVER['HTTP_DNT']) ? $_SERVER['HTTP_DNT'] : NULL;
      if ((int) $dnt === 0 && $dnt !== NULL) {
        $method = 'default';
      }
      else {
        $method = 'opt_in';
      }
    }

    // Set default value for $popup_info_template.
    $popup_info_template = 'eu_cookie_compliance_popup_info';

    $withdraw_button_on_info_popup = $config->get('withdraw_button_on_info_popup');
    $save_preferences_button_label = '';

    switch ($method) {
      case 'default':
        $click_confirmation = $config->get('popup_clicking_confirmation');
        $scroll_confirmation = $config->get('popup_scrolling_confirmation');
        $primary_button_label = $config->get('popup_agree_button_message');
        $primary_button_class = 'agree-button eu-cookie-compliance-default-button';
        $secondary_button_label = '';
        $secondary_button_class = '';
        $privacy_settings_tab_label = FALSE;
        $withdraw_button_on_info_popup = FALSE;
        break;

      case 'opt_in':
        $click_confirmation = FALSE;
        $scroll_confirmation = FALSE;
        $primary_button_label = $config->get('popup_agree_button_message');
        $primary_button_class = 'agree-button eu-cookie-compliance-secondary-button';
        $secondary_button_label = $config->get('disagree_button_label');
        $secondary_button_class = 'decline-button eu-cookie-compliance-default-button';
        $privacy_settings_tab_label = $withdraw_button_on_info_popup ? $config->get('withdraw_tab_button_label') : FALSE;
        break;

      case 'categories':
        $click_confirmation = FALSE;
        $scroll_confirmation = FALSE;
        if ($config->get('enable_save_preferences_button')) {
          $save_preferences_button_label = $config->get('save_preferences_button_label');
          $primary_button_label = $config->get('accept_all_categories_button_label');
        }
        else {
          $save_preferences_button_label = '';
          $primary_button_label = $config->get('popup_agree_button_message');
        }
        $primary_button_class = 'agree-button eu-cookie-compliance-default-button';
        $secondary_button_label = $config->get('withdraw_action_button_label');
        $secondary_button_class = 'eu-cookie-withdraw-button hidden';
        $privacy_settings_tab_label = $withdraw_button_on_info_popup ? $config->get('withdraw_tab_button_label') : FALSE;
        break;

      case 'opt_out':
        $click_confirmation = FALSE;
        $scroll_confirmation = FALSE;
        $primary_button_label = $config->get('disagree_button_label');
        $primary_button_class = 'decline-button eu-cookie-compliance-secondary-button';
        $secondary_button_label = $config->get('popup_agree_button_message');
        $secondary_button_class = 'agree-button eu-cookie-compliance-default-button';
        $privacy_settings_tab_label = $withdraw_button_on_info_popup ? $config->get('withdraw_tab_button_label') : FALSE;
        break;
    }

    $cookie_categories = $config->get('cookie_categories');
    $fix_first_cookie_category = $config->get('fix_first_cookie_category');
    $cookie_categories = $method === 'categories' ? _loom_cookie_extract_category_key_label_description($cookie_categories) : FALSE;

    $popup_text_info = str_replace(["\r", "\n"], '', Xss::filterAdmin($config->get('popup_info.value')));
    $withdraw_markup = str_replace(["\r", "\n"], '', Xss::filterAdmin($config->get('withdraw_message.value')));

    // @NOTE: disagree_button is a legacy variable name renamed
    // to more_info_button, keeped it to avoid problems in customs templates.
    $html_info = [
      '#theme' => $popup_info_template,
      '#message' => check_markup($popup_text_info, $config->get('popup_info.format')),
      '#agree_button' => $primary_button_label,
      '#disagree_button' => ($config->get('show_more_info') == TRUE) ? $config->get('popup_more_info_button_message') : FALSE,
      '#more_info_button' => ($config->get('show_more_info') == TRUE) ? $config->get('popup_more_info_button_message') : FALSE,
      '#secondary_button_label' => $secondary_button_label,
      '#primary_button_class' => $primary_button_class,
      '#secondary_button_class' => $secondary_button_class,
      '#cookie_categories' => $cookie_categories,
      '#save_preferences_button_label' => $save_preferences_button_label,
      '#fix_first_cookie_category' => $fix_first_cookie_category,
      '#privacy_settings_tab_label' => $privacy_settings_tab_label,
      '#withdraw_button_on_info_popup' => $withdraw_button_on_info_popup,
      '#method' => $method,
    ];
    $mobile_popup_text_info = str_replace(["\r", "\n"], '', Xss::filterAdmin($config->get('mobile_popup_info.value')));
    $mobile_html_info = [
      '#theme' => $popup_info_template,
      '#message' => check_markup($mobile_popup_text_info, $config->get('popup_info.format')),
      '#agree_button' => $primary_button_label,
      '#disagree_button' => ($config->get('show_more_info') == TRUE) ? $config->get('popup_more_info_button_message') : FALSE,
      '#more_info_button' => ($config->get('show_more_info') == TRUE) ? $config->get('popup_more_info_button_message') : FALSE,
      '#secondary_button_label' => $secondary_button_label,
      '#primary_button_class' => $primary_button_class,
      '#secondary_button_class' => $secondary_button_class,
      '#cookie_categories' => $cookie_categories,
      '#save_preferences_button_label' => $save_preferences_button_label,
      '#fix_first_cookie_category' => $fix_first_cookie_category,
      '#privacy_settings_tab_label' => $privacy_settings_tab_label,
      '#withdraw_button_on_info_popup' => $withdraw_button_on_info_popup,
      '#method' => $method,
    ];
    $withdraw_markup = [
      '#theme' => 'eu_cookie_compliance_withdraw',
      '#message' => check_markup($withdraw_markup, $config->get('withdraw_message.format')),
      '#withdraw_tab_button_label' => $config->get('withdraw_tab_button_label'),
      '#withdraw_action_button_label' => $config->get('withdraw_action_button_label'),
    ];

    $was_debugging = FALSE;

    /*
     * @var $twig_service Twig_Environment
     */
    $twig_service = Drupal::service('twig');

    if ($twig_service->isDebug()) {
      $was_debugging = TRUE;
      $twig_service->disableDebug();
    }

    $html_info = trim(Drupal::service('renderer')->renderRoot($html_info)->__toString());
    $mobile_html_info = trim(Drupal::service('renderer')->renderRoot($mobile_html_info)->__toString());
    $withdraw_markup = trim(Drupal::service('renderer')->renderRoot($withdraw_markup)->__toString());

    if ($was_debugging) {
      $twig_service->enableDebug();
    }

    $popup_link = $config->get('popup_link');
    if (UrlHelper::isExternal($popup_link)) {
      $popup_link = Url::fromUri($popup_link);
    }
    else {
      // Guard against translations being entered without leading slash.
      if (substr($popup_link, 0, 1) != '/' && substr($popup_link, 0, 1) != '?' && substr($popup_link, 0, 1) != '#') {
        $popup_link = '/' . $popup_link;
      }
      $popup_link = $popup_link === '<front>' ? '/' : $popup_link;
      $popup_link = Url::fromUserInput($popup_link);
    }
    $popup_link = $popup_link->toString();
    $cookie_categories = $config->get('cookie_categories');
    $cookie_categories = _loom_cookie_extract_category_key_label_description($cookie_categories);

    $data['variables'] = [
      'popup_enabled'        => $config->get('popup_enabled'),
      'popup_clicking_confirmation' => $click_confirmation,
      'popup_scrolling_confirmation' => $scroll_confirmation,
      'popup_html_info'      => $config->get('popup_enabled') ? $html_info : FALSE,
      'use_mobile_message'   => !empty($config->get('use_mobile_message')) ? $config->get('use_mobile_message') : FALSE,
      'mobile_popup_html_info' => $config->get('popup_enabled') ? $mobile_html_info : FALSE,
      'mobile_breakpoint'    => !empty($config->get('mobile_breakpoint')) ? $config->get('mobile_breakpoint') : '768',
      'popup_use_bare_css'   => !empty($config->get('use_bare_css')) ? $config->get('use_bare_css') : FALSE,
      'popup_height'         => !empty($config->get('popup_height')) ? $config->get('popup_height') : 'auto',
      'popup_width'          => !empty($config->get('popup_width')) ? $config->get('popup_width') : '100%',
      'popup_delay'          => (int) ($config->get('popup_delay')),
      'popup_link'           => $popup_link,
      'popup_link_new_window' => $config->get('popup_link_new_window'),
      'popup_position'       => $config->get('popup_position'),
      'fixed_top_position'   => !empty($config->get('fixed_top_position')) ? $config->get('fixed_top_position') : FALSE,
      'popup_language'       => $language->getId(),
      'store_consent'        => $config->get('consent_storage_method') != 'do_not_store',
      'better_support_for_screen_readers'         => !empty($config->get('better_support_for_screen_readers')) ? $config->get('better_support_for_screen_readers') : FALSE,
      'cookie_name'          => !empty($config->get('cookie_name')) ? $config->get('cookie_name') : '',
      'reload_page'          => !empty($config->get('reload_page')) ? $config->get('reload_page') : FALSE,
      'domain'               => $config->get('domain'),
      'domain_all_sites'     => $config->get('domain_all_sites'),
      'popup_eu_only_js'     => !empty($config->get('eu_only_js')) ? $config->get('eu_only_js') : FALSE,
      'cookie_lifetime'      => $config->get('cookie_lifetime'),
      'cookie_session'       => $config->get('cookie_session'),
      'disagree_do_not_show_popup' => !empty($config->get('disagree_do_not_show_popup')) ? $config->get('disagree_do_not_show_popup') : FALSE,
      'method'               => $method,
      'whitelisted_cookies'  => !empty($config->get('whitelisted_cookies')) ? $config->get('whitelisted_cookies') : '',
      'withdraw_markup'      => $withdraw_markup,
      'withdraw_enabled'     => $config->get('withdraw_enabled'),
      'withdraw_button_on_info_popup' => $config->get('withdraw_button_on_info_popup'),
      'cookie_categories'   => is_array($cookie_categories) ? array_keys($cookie_categories) : FALSE,
      'enable_save_preferences_button' => $config->get('enable_save_preferences_button'),
      'fix_first_cookie_category'    => $config->get('fix_first_cookie_category'),
      'select_all_categories_by_default' => $config->get('select_all_categories_by_default'),
    ];

    $attachments['#attached']['drupalSettings']['loom_cookie'] = $data['variables'];
    /**
     * @todo: Legacy, remove if possible
     */
    $attachments['#attached']['drupalSettings']['eu_cookie_compliance'] = $attachments['#attached']['drupalSettings']['loom_cookie'];
    if ($config->get('use_bare_css')) {
      $attachments['#attached']['library'][] = 'loom_cookie/bare';
    }
    else {
      $attachments['#attached']['library'][] = 'loom_cookie/main';
    }

    // Add inline css.
    if (!empty($data['css'])) {
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => $data['css'],
        ],
        'eu-cookie-compliance-css',
      ];
    }
    $cache_tags = isset($attachments['#cache']['tags']) ? $attachments['#cache']['tags'] : [];
    $attachments['#cache']['tags'] = Cache::mergeTags($cache_tags, $config->getCacheTags());
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * @param array $attachments
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function loom_cookie_page_attachments_alter(array &$attachments) {
  if (!isset($attachments['#attached']['drupalSettings'])) {
    return;
  }

  /** @var CategoryInterface[] $categories */
  $categories = Drupal::entityTypeManager()
    ->getStorage('loom_cookie_category')
    ->loadMultiple();

  $vendor_storage = Drupal::entityTypeManager()
    ->getStorage('loom_cookie_vendor');

  $settings = [];
  $settings['categories'] = [];
  foreach ($categories as $category) {
    if (!empty($category->attachmentNamesVendors)) {
      $vendors = $vendor_storage->loadByProperties(['uuid' => $category->attachmentNamesVendors]);
      $attachment_names = [];
      /** @var \Drupal\loom_cookie\Entity\Vendor $vendor */
      foreach ($vendors as $vendor) {
        if ($vendor->hasField('attachment_names') && !$vendor->get('attachment_names')->isEmpty()) {
          $attachment_names = array_merge($attachment_names, _loom_cookie_multiline_split($vendor->get('attachment_names')->getString()));
        }
      }

      // remove all attachments that are configured to be filtered
      foreach ($attachments['#attached']['html_head'] as &$attachment) {
        if (in_array($attachment[1], $attachment_names)) {
          $cookie_category = $attachment[0]['#attributes']['data-loom-cookie-category'] ?? '';
          $cookie_category = array_filter(explode(',', $cookie_category));
          $cookie_category[] = $category->id();
          $attachment[0]['#attributes']['data-loom-cookie-category'] = implode(',', array_unique($cookie_category));
          $attachment[0]['#attributes']['data-loom-cookie-type'] = 'script-block';
          $attachment[0]['#attributes']['data-loom-cookie-content'] = $attachment[0]['#value'] ?? NULL;
          if (isset($attachment[0]['#value'])) {
            $attachment[0]['#value'] = '';
          }
        }
      }
    }

    if (!empty($category->scriptUrlRegexesClientSideVendors)) {
      $vendors = $vendor_storage->loadByProperties(['uuid' => $category->scriptUrlRegexesClientSideVendors]);
      /** @var \Drupal\loom_cookie\Entity\Vendor $vendor */
      foreach ($vendors as $vendor) {
        if ($vendor->hasField('script_url_regexes') && !$vendor->get('script_url_regexes')->isEmpty()) {
          $script_url_regexes = str_replace('/', '\/', _loom_cookie_multiline_split($vendor->get('script_url_regexes')->getString()));
          $big_regex          = !empty($script_url_regexes)
            ? '^(' . implode('|', $script_url_regexes) . ')$'
            : '';

          if ($big_regex) {
            $categories = $settings['scriptUrlRegexes'][$vendor->uuid()]['categories'] ?? [];
            $categories[$category->id()] = $category->id();
            $settings['scriptUrlRegexes'][$vendor->uuid()] = [
              'categories' => array_unique($categories),
              'regexp' => $big_regex,
            ];
          }
        }
      }
    }

    $settings['categories'][] = $category->id();
  }

  // insert script that re-enables scripts when the category gets allowed
  array_unshift($attachments['#attached']['library'], 'loom_cookie/extended');
  array_unshift($attachments['#attached']['html_head'], [
    [
      '#tag' => 'script',
      '#attributes' => [
        'src' => '/modules/contrib/loom_cookie/js/loom_cookie.block.js',
      ],
    ],
    'loom_cookie_block_scripts',
  ]);
  array_unshift($attachments['#attached']['html_head'], [
    [
      '#tag' => 'script',
      '#value' => Markup::create('window.loomCookieSettings = ' . json_encode($settings)),
    ],
    'loom_cookie_settings',
  ]);
  array_unshift($attachments['#attached']['html_head'], [
    [
      '#tag' => 'script',
      '#value' => Markup::create('window.loomCookieSettingsECC = ' . json_encode($attachments['#attached']['drupalSettings']['loom_cookie'] ?? [])),
    ],
    'loom_cookie_settings_ecc',
  ]);
  // add styles
  array_unshift($attachments['#attached']['library'], 'loom_cookie/styles');
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param array $theme_registry
 */
function loom_cookie_theme_registry_alter(&$theme_registry) {
  // legacy: themes and modules might have included custom preprocess functions which rely on the old module weight
  foreach ($theme_registry as &$item) {
    if (empty($item['preprocess functions'])) continue;

    $functions = &$item['preprocess functions'];

    if (FALSE === $key = array_search('loom_cookie_preprocess_eu_cookie_compliance_popup_info', $functions)) continue;

    unset($functions[$key]);
    array_unshift($functions, 'loom_cookie_preprocess_eu_cookie_compliance_popup_info');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param $vars
 */
function loom_cookie_preprocess_html(&$vars) {
  // add cache tags for this module
  $config = Drupal::config('loom_cookie.settings');
  $cache_tags = isset($vars['#cache']['tags']) ? $vars['#cache']['tags'] : [];
  $cache_tags[] = 'config:loom_cookie_category_list';
  $vars['#cache']['tags'] = Cache::mergeTags($cache_tags, $config->getCacheTags());


  // hide cookie banner on specific pages
  $ecc_config = Drupal::config('loom_cookie.settings');
  $path = Drupal::service('path.current')->getPath();
  $url_alias_path = Drupal::service('path_alias.manager')
    ->getAliasByPath($path);
  $exclude_paths = $ecc_config->get('exclude_paths');
  $path_matcher = Drupal::service('path.matcher');
  $path_match = $path_matcher->matchPath($path, $exclude_paths);
  $path_match_url_alias = $path_matcher->matchPath($url_alias_path, $exclude_paths);
  if ($path_match || $path_match_url_alias) {
    $vars['attributes']['class'][] = 'hide-cookie-banner';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $vars
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function loom_cookie_preprocess_eu_cookie_compliance_popup_info(&$vars) {
  if (empty($vars['cookie_categories'])) {
    return;
  }

  /** @var CategoryInterface[] $categories */
  $categories = Drupal::entityTypeManager()
    ->getStorage('loom_cookie_category')
    ->loadMultiple();

  foreach ($vars['cookie_categories'] as $cat_id => &$cookie_category) {
    $category = $categories[$cat_id];

    $cookie_category['id'] = $cat_id;
    $cookie_category['label'] = $category->label();
    if (!empty($category->description)) {
      $cookie_category['description'] = Markup::create($category->description['value']);
    }
    if (!empty($category->detailedDescription['value'])) {
      $cookie_category['detailed_description'] = Markup::create($category->detailedDescription['value']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function loom_cookie_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Lock vendors view for everyone to ensure later updates won't override anything custom
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm || $form_object instanceof EntityDeleteForm) {
    if ($form_object->getEntity()->getEntityTypeId() === 'view' && $form_object->getEntity()->id() === 'loom_cookie_vendors') {
      $form_object->messenger()->addWarning('This view is locked by loom_cookie.');
      $form['actions']['submit']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_cron().
 */
function loom_cookie_cron() {
  // delete old consent entries
  $consent_entry_lifetime = Drupal::config('loom_cookie.settings')
    ->get('consent_storage_lifetime');
  $max_possible_timestamp = time() - $consent_entry_lifetime * 24 * 60 * 60;

  Drupal::database()->delete('loom_cookie_basic_consent')
    ->condition('timestamp', $max_possible_timestamp, '<')
    ->execute();

  // update vendors
  /** @var \Drupal\loom_cookie\Services\VendorService $vendor_service */
  $vendor_service = Drupal::service('loom_cookie.vendor');
  $vendor_service->import();
}

/**
 * @param $value
 *
 * @return array
 */
function _loom_cookie_multiline_split($value): array {
  if (empty($value)) {
    return [];
  }
  return str_replace("\r", '', array_filter(array_unique(explode("\n", $value))));
}

/**
 * Converts a multiline, list of key|label|description strings to an array.
 *
 * @param string $string
 *   A multiline string containing key, label and optionally a description
 *   separated by a pipe symbol.
 *
 * @return array
 *   An array of categories the form
 *   [key => ['label' => label, 'description' => description]]
 */
function _loom_cookie_extract_category_key_label_description($string) {
  $categories = [];

  $list = explode("\n", $string);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');

  foreach ($list as $text) {
    $parts = explode('|', $text);
    $num_parts = count($parts);
    if ($num_parts >= 3) {
      $key = trim($parts[0]);
      $label = trim($parts[1]);
      $description = trim($parts[2]);
    }
    elseif ($num_parts === 2) {
      $key = trim($parts[0]);
      $label = trim($parts[1]);
      $description = '';
    }
    else {
      $key = $label = trim($parts[0]);
      $description = '';
    }

    $categories[$key] = ['label' => $label, 'description' => $description];
  }
  return $categories;
}

/**
 * Check if the user is in the EU.
 */
function _loom_cookie_user_in_eu() {
  $geoip_match = FALSE;
  $eu_countries_default = [
    NULL, 'AT', 'AX', 'BE', 'BG', 'CY', 'CZ', 'DE', 'DK', 'EE', 'EL', 'ES',
    'EU', 'FI', 'FR', 'GB', 'GF', 'GI', 'GP', 'GR', 'HR', 'HU', 'IE', 'IS',
    'IT', 'LI', 'LT', 'LU', 'LV', 'ME', 'MF', 'MQ', 'MT', 'NL', 'NO', 'PL',
    'PT', 'RE', 'RO', 'SE', 'SI', 'SK', 'YT', 'UK',
  ];
  // Allow custom array of countries to be loaded from settings.php, defaulting
  // to the array above.
  $config = Drupal::config('loom_cookie.settings');
  $eu_countries = !empty($config->get('eu_countries')) ? $config->get('eu_countries') : $eu_countries_default;

  $ip_address = Drupal::request()->getClientIp();

  // Try to get country_code by php extension.
  $country_code = extension_loaded('geoip') ? geoip_country_code_by_name($ip_address) : '';

  // Try to get country_code by smart_ip module.
  if (Drupal::moduleHandler()->moduleExists('smart_ip')) {
    $location_service = \Drupal::service('smart_ip.smart_ip_location');
    $smart_ip_session = $location_service->get();
    $country_code = isset($smart_ip_session['countryCode']) ? $smart_ip_session['countryCode'] : NULL;
  }
  // Try to get country_code by geoip module.
  elseif (Drupal::moduleHandler()->moduleExists('geoip')) {
    $geo_location_service = \Drupal::service('geoip.geolocation');
    $geo_ip_session = $geo_location_service->geolocate($ip_address);
    $country_code = !empty($geo_ip_session) ? $geo_ip_session : NULL;
  }

  // If the CloudFlare provided country header is available, use it as a
  // fallback. See:
  // https://support.cloudflare.com/hc/en-us/articles/200168236-What-does-Cloudflare-IP-Geolocation-do-
  if (empty($country_code) && (isset($_SERVER['HTTP_CF_IPCOUNTRY']))) {
    $country_code = $_SERVER['HTTP_CF_IPCOUNTRY'];
  }

  if (in_array($country_code, $eu_countries) || $country_code == '' || $country_code == '-') {
    $geoip_match = TRUE;
  }

  return [
    'country' => $country_code,
    'in_eu' => $geoip_match,
  ];
}

/**
 * Helper function to set module weight.
 */
function _loom_cookie_module_set_weight() {
  $weight = 1;
  $exclude_modules = [
    'loom_cookie',
  ];

  $extension_config = \Drupal::configFactory()->get('core.extension');
  // Loop through all installed modules to find the highest weight.
  foreach ($extension_config->get('module') as $module_name => $module_weight) {
    if ($module_weight > $weight && !in_array($module_name, $exclude_modules)) {
      $weight = $module_weight + 1;
    }
  }
  module_set_weight('loom_cookie', $weight);
}

/**
 * Validate field for a HEX value if a value is set.
 *
 * @param array $element
 *   Element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form State Interface.
 */
function _loom_cookie_validate_hex(array $element, FormStateInterface &$form_state) {
  if (!empty($element['#value']) && !preg_match('/^[0-9a-fA-F]{3,6}$/', $element['#value'])) {
    $form_state->setError($element, t('%name must be a HEX value (without leading #) or empty.', ['%name' => $element['#title']]));
  }
}
